/********************************************************************
 *******************************************************************
________                        _____     ________                    
__  ___/______ _________ _________  /_    __  ___/____________________
_____ \__  __ `__ \  __ `/_  ___/  __/    _____ \_  ___/_  ___/_  ___/
____/ /_  / / / / / /_/ /_  /   / /_      ____/ // /__ _(__  )_(__  ) 
/____/ /_/ /_/ /_/\__,_/ /_/    \__/      /____/ \___/ /____/ /____/ 
         
             A Best sass framework for build typography, 
                   colors, grid, and many things too 
                                                                      
               Tools Used : 100% powerful SASS language
                copyright : Â© 2021 Suresh.P
                 License  : Code released by MIT License

*******************************************************************
********************************************************************/

@use "sass:math";
@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "sass:color";
@use "sass:meta";

 /* Convert  CMYK to rgb */
 @function cmyk($c,$m,$y,$k) {
    @return rgb(math.round(255 * (1 - math.div($c,100)) * (1 - math.div($k,100))),
             math.round(255 * (1 - math.div($m,100)) * (1 - math.div($k,100))),
             math.round(255 * (1 - math.div($y,100)) * (1 - math.div($k,100))));
 }

 /* Sixhexa should be 6 characters only*/
@function sixhexa($hexasix) {
    @if str-length(smarty) > str-length($hexasix) {
        @return ##{to-upper-case($hexasix)};
    }
}

/* Typescale pixels */
@mixin typescale-px($base,$d,$n) {
    $ratio: math.div($d,$n);
     .xl {
        font-size: math.div($base,$base) * $ratio * $ratio * $ratio * $ratio+rem;
    }
      .lg {
        font-size: math.div($base,$base) * $ratio * $ratio * $ratio+rem; 
    }
        .md {
        font-size: math.div($base,$base) * $ratio * $ratio+rem; 
    }
        .sm {
        font-size: math.div($base,$base) * $ratio+rem;
    }
        .paragraph {
        font-size: math.div($base,$base)+rem; 
    }
      .sub-text {
        font-size: math.abs(math.div($base,$base) - 2)+rem; 
    }
    .buttons {
        font-size: math.div(math.div($base,$base),$ratio)+rem;
    }
    .captions {
        font-size:  math.div(math.div(math.div($base,$base),$ratio),$ratio)+rem;
    }
}

 /*  Vendor specfied - prefix */
@mixin vendors($property,$value,$c) {
   $vendor: (webkit moz ms);
   @for $_ from $c through $c {
      #{'-'+#{nth($vendor,$_)}+'-'+#{$property}}: $value;
   }
}

/* Monochromatic-color */
  @mixin monochromatic-color($cors,$hs,$controlone,$controltwo) {
     $hs: $hs;
     $cor: (color background);
     @for $_ from $controlone through $controltwo  {
     #{nth($cor,$cors)}: hsl($hs,100%,50% + $_);
 }
}

 /*  Triadic-color */
@mixin triadic-color($cors,$hs) {
     $hs: $hs;  
     $cs: $hs + 120;
     $c: $hs + 240; 
     $cor: (color background);
     #{nth($cor,$cors)}: hsl($hs,100%,50%);
     #{nth($cor,$cors)}: hsl($cs,100%,50%);
     #{nth($cor,$cors)}: hsl($c,100%,50%);
}

/*  Tetradic-color */
@mixin tetradic-color($cors,$hs,$h) {
     $hs: $hs;
     $h: $hs + 90; 
     $cs: $h + 90; 
     $c: $cs + 90; 
     $cor: (color background);
     #{nth($cor,$cors)}: hsl($hs,100%,50%);
     #{nth($cor,$cors)}: hsl($h,100%,50%);
     #{nth($cor,$cors)}: hsl($cs,100%,50%);
     #{nth($cor,$cors)}: hsl($c,100%,50%);
}

/*  analogous-color */
@mixin analogous-color($cors,$hs) {
     $hs: $hs; // 0
     $cs: $hs + 30;
     $c: $cs + 300;
     $cor: (color background);
     #{nth($cor,$cors)}: hsl($hs,100%,50%);
     #{nth($cor,$cors)}: hsl($cs,100%,50%);
     #{nth($cor,$cors)}: hsl($c,100%,50%);
}

/*  flexible media queries */
@mixin flexible-media($size,$c) {
   $values:(
      math.div($size,16)+em, 
      math.div($size,12)+pt,
      math.div($size,1)+px
      );
   @media only screen and (max-width: list.nth($values,$c)) {
      @content;
   }
}

/* custom grid system */
@mixin grid-system($bsize,$column,$gutter) {
@if type-of($bsize or $gutter or $column) == number {

   .gridsystem12 {
      max-width: $bsize+px;
      width: 100%;
      padding: 0 $gutter / $bsize * 100%;
      margin: auto;
   }
   .grid {
      &-1, &-2, &-3, &-4, &-5, &-6,  &-7, &-8, &-9, &-10, &-11, &-12 {
         float: left;
   }
    @for $_ from 1 through 12 {
      &-#{$_} {
         width: math.round($column * $_ + $gutter * $_ - $gutter)/ $bsize * 100%;
      }
    }
    @if list.separator(asdf) {
   content: "kindly type numbers only";
}
    }
    .clear-left:before {
      clear: left;
    }
    .clear-left:after {
      clear: left;
    }
    .clear-right:after {
      clear: left;
    }
    .clear-right:before {
      clear: left;
    }
    .float-left {
      float: left;
    }
    .float-right {
      float: right;
    }
}
}

/* typescale-rem */
@function typescale-rem($base-size,$lg,$incrtodec) {
$units: rem; 
   $lg: $lg; 
   $xl: math.div($lg,$base-size);
   $md: math.div($xl,$base-size);
   $sm: math.div($md,$base-size); 
   $xs: math.div($sm,$base-size); 
   $xss: math.div($xs,$base-size); 
   $xsss: math.div($xss,$base-size);
   $xssss: math.div($xsss,$base-size);
   $xsssss: math.div($xssss,$base-size);
   $xssssss: math.div($xsssss,$base-size);
   $xsssssss: math.div($xssssss,$base-size);
   $xssssssss: math.div($xsssssss,$base-size);
   $sizes: ($lg,$xl,$md,$sm,$xs,$xss,$xsss,$xssss,$xsssss,$xssssss,$xsssssss,$xssssssss);
   @return nth($sizes,$incrtodec)+$units;
}

/* border radius  */
@function border($ds,$dss) {
   $round: 0.5; $nonrounded: 0;
   @if $ds == $dss {
   @return calc(#{$round} * #{$ds});
}
@if $dss != $ds {
   @return calc(#{$nonrounded} * #{$dss});
}
}

/* font weights 100 to 800 */
$maxbold: 100;
@function adjustbold($ab) {
   @return $maxbold * $ab; 
}

/* color accessbility - black color only */
@function checkcolorasb($check) {
    $levels: (
        level: 
        (
            first: AA
            ) 
        );
    @if (lightness($check) <= 30%) {
         @return  $check;
    }
    @return white;
}

/* detect-layouts whether desktop or mobile view width */
@mixin detect-layouts {
@media only screen and (max-width: 1600px) {
 .detect::After {
    content: "Desktop";
    background: black;
    color: white;
    width: 60px;
    padding: 6px;
    border-radius: 20px;
    display: inline-block;
    position: absolute;
    left: 1%;
    top: 1%;
    font-family: arial;
    font-size: 14px;
    text-align: center;
    font-size: 14px;
   }
}

@media only screen and (max-width: 600px) {
  .detect::After {
   content: "Mobile";
   display: inline-block;
   position: absolute;
   left: 1%;
   top: 1%;
   font-family: arial;
   }
}
}

/*******************/